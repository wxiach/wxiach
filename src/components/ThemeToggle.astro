---

---

<div class="theme-toggle-container">
  <div class="theme-toggle" id="theme-toggle-control">
    <button id="light-mode-toggle" class="theme-option" aria-label="Switch to light mode" onclick="toggleToLightMode()">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="icon"
      >
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
    </button>
    <button id="dark-mode-toggle" class="theme-option" aria-label="Switch to dark mode" onclick="toggleToDarkMode()">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="icon"
      >
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
    </button>
    <div class="active-indicator" id="theme-active-indicator"></div>
  </div>
</div>

<style>
  .theme-toggle-container {
    display: flex;
    justify-content: center;
  }

  .theme-toggle {
    position: relative;
    display: flex;
    border-radius: 16px;
    border: 1px solid rgba(150, 150, 150, 0.1);
    padding: 2px;
    background-color: #f5f5f5;
    width: 64px;
    height: 30px;
  }

  .theme-toggle.dark {
    background-color: #2a2a2a;
    border-color: rgba(255, 255, 255, 0.05);
  }

  .theme-option {
    position: relative;
    z-index: 1;
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 18px;
    color: #71717a;
    background: transparent;
    border: none;
    cursor: pointer;
    transition-property: color;
    transition-duration: 0.2s;
  }

  .icon {
    opacity: 0.7;
    transition-property: opacity;
    transition-duration: 0.2s;
  }

  .active-indicator {
    position: absolute;
    z-index: 0;
    top: 2px;
    left: 2px;
    width: calc(50% - 2px);
    height: calc(100% - 4px);
    border-radius: 18px;
    background-color: white;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    transition-property: transform;
    transition-duration: 0.25s;
    transition-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
    will-change: transform;
  }

  .active-indicator.dark {
    background-color: #3f3f46;
    transform: translateX(calc(100% - 0px));
  }

  .theme-option.dark {
    color: #a1a1aa;
  }

  #light-mode-toggle.active {
    color: #18181b;
  }

  #light-mode-toggle.active .icon {
    opacity: 1;
  }

  #dark-mode-toggle.active {
    color: #e4e4e7;
  }

  #dark-mode-toggle.active .icon {
    opacity: 1;
  }
</style>

<script is:inline>
  // 设置主题并更新UI
  function setThemeAndUpdateUI(theme) {
    const isDark = document.documentElement.classList.contains("dark");
    if ((theme === "dark" && isDark) || (theme === "light" && !isDark)) {
      return;
    }

    // 立即更新UI
    updateToggleUI(theme);

    // 临时禁用过渡动画
    document.documentElement.classList.add("disable-transitions");

    // 设置主题
    localStorage.theme = theme;
    if (window.themeManager) {
      window.themeManager.applyTheme();
    } else {
      if (theme === "dark") {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    }

    // 恢复过渡动画
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        document.documentElement.classList.remove("disable-transitions");
      });
    });
  }

  // 更新切换按钮UI
  function updateToggleUI(theme) {
    const toggle = document.getElementById("theme-toggle-control");
    const indicator = document.getElementById("theme-active-indicator");
    const lightBtn = document.getElementById("light-mode-toggle");
    const darkBtn = document.getElementById("dark-mode-toggle");

    if (toggle && indicator && lightBtn && darkBtn) {
      if (theme === "dark") {
        toggle.classList.add("dark");
        indicator.classList.add("dark");
        lightBtn.classList.remove("active");
        darkBtn.classList.add("active");
      } else {
        toggle.classList.remove("dark");
        indicator.classList.remove("dark");
        darkBtn.classList.remove("active");
        lightBtn.classList.add("active");
      }
    }
  }

  // 主题切换函数
  function toggleToLightMode() {
    setThemeAndUpdateUI("light");
  }

  function toggleToDarkMode() {
    setThemeAndUpdateUI("dark");
  }

  // 初始化
  function initializeToggleState() {
    const isDark = document.documentElement.classList.contains("dark");
    updateToggleUI(isDark ? "dark" : "light");
  }

  // 覆盖全局theme manager的方法
  if (window.themeManager) {
    window.themeManager.setTheme = setThemeAndUpdateUI;
  }

  // 初始化和页面转换
  document.addEventListener("DOMContentLoaded", initializeToggleState);
  document.addEventListener("astro:after-swap", initializeToggleState);
  initializeToggleState();
</script>
