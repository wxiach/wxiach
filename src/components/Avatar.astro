---
import { Image } from "astro:assets";
import avatar from "@/assets/avatar.png";
import { cn } from "@/lib/utils";

interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<div class="avatar-container group relative cursor-pointer select-none">
  <div
    class="absolute inset-0 rounded-full bg-gradient-to-r from-zinc-200 to-zinc-300 opacity-0 blur-md transition-opacity duration-700 group-hover:opacity-20 dark:from-zinc-700 dark:to-zinc-600"
  >
  </div>
  <Image
    id="avatar-image"
    class={cn(
      className,
      "size-32 rounded-full object-cover border-2 border-zinc-200 dark:border-zinc-800",
      "transition-all duration-500 ease-in-out select-none",
      "group-hover:scale-[1.02] group-hover:shadow-sm",
      "dark:shadow-none"
    )}
    src={avatar}
    alt="avatar"
    draggable="false"
  />
</div>

<script>
  // Rotate avatar when clicked
  document.addEventListener("DOMContentLoaded", function () {
    setupAvatarRotation();
  });

  document.addEventListener("astro:page-load", function () {
    setupAvatarRotation();
  });

  function setupAvatarRotation() {
    const avatar = document.getElementById("avatar-image");
    const container = document.querySelector(".avatar-container");

    if (!avatar || !container) return;

    let isRotating = false;

    container.addEventListener("click", e => {
      // Prevent default events and propagation
      e.preventDefault();
      e.stopPropagation();

      // Prevent multiple animations
      if (isRotating) return;

      isRotating = true;

      // Apply smooth rotation
      avatar.style.transition = "transform 3s cubic-bezier(0.1, 0.7, 0.2, 1)";
      avatar.style.transform = "rotate(-360deg) scale(1.02)";

      // Reset after animation completes
      setTimeout(() => {
        avatar.style.transition = "transform 0s";
        avatar.style.transform = "";
        setTimeout(() => {
          avatar.style.transition = "";
          isRotating = false;
        }, 50);
      }, 3000);
    });

    // Prevent double-click selection
    container.addEventListener("dblclick", e => {
      e.preventDefault();
      e.stopPropagation();
      return false;
    });
  }
</script>

<style>
  /* Prevent selection highlight */
  .avatar-container * {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
  }
</style>
