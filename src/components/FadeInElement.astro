---
interface Props {
  delay?: number; // Allow any number as delay
  class?: string;
  onlyWhenVisible?: boolean; // Whether to trigger animation only when element enters viewport
}

const { delay = 0, class: className = "", onlyWhenVisible = false } = Astro.props;

// Map delay to the closest available delay class
let delayClass = "";
if (delay > 0) {
  const delays = [200, 400, 600, 800, 1000, 1200, 1400];
  const closest = delays.reduce((prev, curr) => 
    Math.abs(curr - delay) < Math.abs(prev - delay) ? curr : prev
  );
  delayClass = `delay-${closest}`;
}

const visibilityClass = onlyWhenVisible ? "visibility-trigger" : "";
---

<div class:list={["fade-up", delayClass, visibilityClass, className]}>
  <slot />
</div>

{onlyWhenVisible && (
  <script>
    // Add intersection observer logic to trigger animation only when element enters viewport
    document.addEventListener("DOMContentLoaded", () => {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate");
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
      
      document.querySelectorAll(".visibility-trigger").forEach(el => {
        observer.observe(el);
      });
    });
  </script>
)} 

<style>
  @keyframes fadeUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-up {
    opacity: 0;
    animation: fadeUp 0.8s ease-out forwards;
  }

  .delay-200 {
    animation-delay: 200ms;
  }

  .delay-400 {
    animation-delay: 400ms;
  }

  .delay-600 {
    animation-delay: 600ms;
  }

  .delay-800 {
    animation-delay: 800ms;
  }

  .delay-1000 {
    animation-delay: 1000ms;
  }

  .delay-1200 {
    animation-delay: 1200ms;
  }

  .delay-1400 {
    animation-delay: 1400ms;
  }
</style> 