---

---

<script is:inline>
  // Use is:inline to ensure the code is executed directly in the client without Astro processing
  document.addEventListener("DOMContentLoaded", function () {
    setupFireworks();
  });

  document.addEventListener("astro:page-load", function () {
    setupFireworks();
  });

  function setupFireworks() {
    // Clean up old canvas
    const oldCanvas = document.getElementById("fireworks-canvas");
    if (oldCanvas) {
      oldCanvas.remove();
    }

    // Clean up possible existing animation ID
    if (window.fireworksAnimationId) {
      cancelAnimationFrame(window.fireworksAnimationId);
      window.fireworksAnimationId = null;
    }

    // Create new canvas
    const canvas = document.createElement("canvas");
    canvas.id = "fireworks-canvas";
    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.pointerEvents = "none";
    canvas.style.zIndex = "9999";
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    document.body.appendChild(canvas);

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    let particles = [];
    // Reduce maximum particle limit to improve performance
    const MAX_PARTICLES = 150;

    // Track if animation is active
    let animationActive = false;

    // Long press detection variables
    let isLongPress = false;
    let pressTimer = null;
    let startCoords = { x: 0, y: 0 };
    const LONG_PRESS_THRESHOLD = 300; // milliseconds
    const MOVE_THRESHOLD = 5; // pixels, allowed small movement

    // Particle constructor
    function Particle(x, y, color) {
      this.x = x;
      this.y = y;
      this.color = color;
      this.velocity = {
        x: (Math.random() - 0.5) * 8, // Reduce speed
        y: (Math.random() - 0.5) * 8,
      };
      this.alpha = 1;
      this.decay = 0.015 + Math.random() * 0.015; // Vary decay rate for more natural fade
      this.size = 2 + Math.random() * 2; // Vary particle size

      this.update = function () {
        this.velocity.y += 0.1;
        this.x += this.velocity.x;
        this.y += this.velocity.y;
        this.alpha -= this.decay; // Use variable decay rate for smoother fade

        // Don't render very faint particles to avoid the "hanging" effect
        if (this.alpha <= 0.01) {
          this.alpha = 0;
          return false;
        }

        ctx.save();
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.restore();

        return true;
      };
    }

    // Create firework effect
    function createFirework(x, y) {
      const colors = ["#FFB3BA", "#BAFFC9", "#BAE1FF", "#FFFFBA"];
      const color = colors[Math.floor(Math.random() * colors.length)];

      // Adjust particle count based on device performance
      const isMobile = window.innerWidth <= 768;
      const particleCount = isMobile ? 15 : 30; // Reduce particle count

      // Check total particles, avoid too many affecting performance
      if (particles.length > MAX_PARTICLES) {
        particles = particles.slice(-MAX_PARTICLES / 2);
      }

      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle(x, y, color));
      }

      // Start animation if not already running
      if (!animationActive) {
        startAnimation();
      }
    }

    // Start animation loop
    function startAnimation() {
      if (!animationActive) {
        animationActive = true;
        window.fireworksAnimationId = requestAnimationFrame(animate);
      }
    }

    // Animation loop
    function animate() {
      // If page is not visible, pause animation
      if (document.hidden) {
        window.fireworksAnimationId = requestAnimationFrame(animate);
        return;
      }

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Filter out invisible particles immediately
      const hasParticles = particles.length > 0;
      particles = particles.filter(particle => particle.update());

      // Continue animation if particles exist
      if (particles.length > 0) {
        window.fireworksAnimationId = requestAnimationFrame(animate);
      } else {
        // Last particles just disappeared
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        window.fireworksAnimationId = null;
        animationActive = false;
      }
    }

    // Mouse down event handler
    function handleMouseDown(e) {
      // Record starting point
      startCoords = { x: e.clientX, y: e.clientY };

      // Clear any existing timer
      if (pressTimer !== null) {
        clearTimeout(pressTimer);
      }

      // Set long press flag to false
      isLongPress = false;

      // Start long press detection timer
      pressTimer = setTimeout(() => {
        isLongPress = true;
      }, LONG_PRESS_THRESHOLD);
    }

    // Mouse move event handler
    function handleMouseMove(e) {
      // If movement exceeds threshold, cancel long press detection
      if (
        pressTimer !== null &&
        (Math.abs(e.clientX - startCoords.x) > MOVE_THRESHOLD ||
          Math.abs(e.clientY - startCoords.y) > MOVE_THRESHOLD)
      ) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }
    }

    // Mouse up event handler
    function handleMouseUp() {
      // Clear long press timer
      if (pressTimer !== null) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }
    }

    // Click event handler
    function handleClick(e) {
      // If long press detected, don't trigger fireworks
      if (isLongPress) {
        return;
      }

      // Check if text is being selected
      const selection = window.getSelection();
      if (selection && selection.toString().length > 0) {
        return;
      }

      // More robust interactive element check
      try {
        if (
          !e.target ||
          ["BUTTON", "A", "INPUT", "TEXTAREA", "SELECT"].includes(e.target.tagName) ||
          e.target.closest("button, a, [role='button']") ||
          e.target.classList.contains("cursor-pointer") ||
          e.target.getAttribute("data-no-fireworks") === "true"
        ) {
          return;
        }
        createFirework(e.clientX, e.clientY);
      } catch (err) {
        // Error silently handled
        console.error("Fireworks error:", err);
      }
    }

    // Handle window resize
    function handleResize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    // Add event listeners
    document.addEventListener("mousedown", handleMouseDown);
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
    document.addEventListener("click", handleClick);

    // Add touch event support
    const touchStartHandler = e => {
      if (e.touches.length > 0) {
        handleMouseDown({
          clientX: e.touches[0].clientX,
          clientY: e.touches[0].clientY,
        });
      }
    };

    const touchMoveHandler = e => {
      if (e.touches.length > 0) {
        handleMouseMove({
          clientX: e.touches[0].clientX,
          clientY: e.touches[0].clientY,
        });
      }
    };

    const touchEndHandler = e => {
      handleMouseUp();
      // Also trigger click for touch end
      if (!isLongPress && e.changedTouches.length > 0) {
        const touch = e.changedTouches[0];
        const clickEvent = {
          clientX: touch.clientX,
          clientY: touch.clientY,
          target: document.elementFromPoint(touch.clientX, touch.clientY),
        };
        handleClick(clickEvent);
      }
    };

    document.addEventListener("touchstart", touchStartHandler);
    document.addEventListener("touchmove", touchMoveHandler);
    document.addEventListener("touchend", touchEndHandler);

    window.addEventListener("resize", handleResize);

    // No need to start animation immediately - will start on first click
    // Animation will now start only when particles are created

    // Cleanup function
    function cleanup() {
      document.removeEventListener("mousedown", handleMouseDown);
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
      document.removeEventListener("click", handleClick);

      // Remove touch event listeners
      document.removeEventListener("touchstart", touchStartHandler);
      document.removeEventListener("touchmove", touchMoveHandler);
      document.removeEventListener("touchend", touchEndHandler);

      window.removeEventListener("resize", handleResize);

      if (pressTimer !== null) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }

      if (window.fireworksAnimationId) {
        cancelAnimationFrame(window.fireworksAnimationId);
        window.fireworksAnimationId = null;
      }
      canvas.remove();
    }

    // Set cleanup on page transition
    document.addEventListener("astro:before-swap", cleanup, { once: true });

    // Optimize for page visibility changes
    document.addEventListener("visibilitychange", function () {
      if (document.hidden && window.fireworksAnimationId) {
        cancelAnimationFrame(window.fireworksAnimationId);
        window.fireworksAnimationId = null;
        animationActive = false;
      } else if (!document.hidden && particles.length > 0 && !animationActive) {
        startAnimation();
      }
    });

    return cleanup;
  }
</script>
