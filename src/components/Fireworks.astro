---

---

<script is:inline>
  // 使用is:inline确保代码直接在客户端执行，不经过Astro处理
  document.addEventListener("DOMContentLoaded", function () {
    setupFireworks();
  });

  document.addEventListener("astro:page-load", function () {
    setupFireworks();
  });

  function setupFireworks() {
    // 清理旧的画布
    const oldCanvas = document.getElementById("fireworks-canvas");
    if (oldCanvas) {
      oldCanvas.remove();
    }

    // 清理可能存在的动画ID
    if (window.fireworksAnimationId) {
      cancelAnimationFrame(window.fireworksAnimationId);
      window.fireworksAnimationId = null;
    }

    // 创建新画布
    const canvas = document.createElement("canvas");
    canvas.id = "fireworks-canvas";
    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.pointerEvents = "none";
    canvas.style.zIndex = "9999";
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    document.body.appendChild(canvas);

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    let particles = [];
    // 降低最大粒子限制以提高性能
    const MAX_PARTICLES = 150;

    // 跟踪动画是否处于活动状态
    let animationActive = false;

    // 长按检测变量
    let isLongPress = false;
    let pressTimer = null;
    let startCoords = { x: 0, y: 0 };
    const LONG_PRESS_THRESHOLD = 300; // 毫秒
    const MOVE_THRESHOLD = 5; // 像素，允许的微小移动

    // 粒子构造函数
    function Particle(x, y, color) {
      this.x = x;
      this.y = y;
      this.color = color;
      this.velocity = {
        x: (Math.random() - 0.5) * 8, // 减小速度
        y: (Math.random() - 0.5) * 8,
      };
      this.alpha = 1;
      this.decay = 0.015 + Math.random() * 0.015; // 变化衰减速率，使淡出更自然
      this.size = 2 + Math.random() * 2; // 变化粒子大小

      this.update = function () {
        this.velocity.y += 0.1;
        this.x += this.velocity.x;
        this.y += this.velocity.y;
        this.alpha -= this.decay; // 使用变速衰减速率使淡出更平滑

        // 不渲染非常微弱的粒子，避免"悬挂"效果
        if (this.alpha <= 0.01) {
          this.alpha = 0;
          return false;
        }

        ctx.save();
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.restore();

        return true;
      };
    }

    // 创建烟花效果
    function createFirework(x, y) {
      const colors = ["#FFB3BA", "#BAFFC9", "#BAE1FF", "#FFFFBA"];
      const color = colors[Math.floor(Math.random() * colors.length)];

      // 根据设备性能调整粒子数量
      const isMobile = window.innerWidth <= 768;
      const particleCount = isMobile ? 15 : 30; // 减少粒子数量

      // 检查总粒子数，避免过多影响性能
      if (particles.length > MAX_PARTICLES) {
        particles = particles.slice(-MAX_PARTICLES / 2);
      }

      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle(x, y, color));
      }

      // 如果动画尚未运行，则启动动画
      if (!animationActive) {
        startAnimation();
      }
    }

    // 启动动画循环
    function startAnimation() {
      if (!animationActive) {
        animationActive = true;
        window.fireworksAnimationId = requestAnimationFrame(animate);
      }
    }

    // 动画循环
    function animate() {
      // 如果页面不可见，暂停动画
      if (document.hidden) {
        window.fireworksAnimationId = requestAnimationFrame(animate);
        return;
      }

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // 立即过滤掉不可见的粒子
      const hasParticles = particles.length > 0;
      particles = particles.filter(particle => particle.update());

      // 如果粒子存在，继续动画
      if (particles.length > 0) {
        window.fireworksAnimationId = requestAnimationFrame(animate);
      } else {
        // 最后的粒子刚刚消失
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        window.fireworksAnimationId = null;
        animationActive = false;
      }
    }

    // 鼠标按下事件处理器
    function handleMouseDown(e) {
      // 记录起始点
      startCoords = { x: e.clientX, y: e.clientY };

      // 清除任何现有的计时器
      if (pressTimer !== null) {
        clearTimeout(pressTimer);
      }

      // 将长按标志设置为false
      isLongPress = false;

      // 开始长按检测计时器
      pressTimer = setTimeout(() => {
        isLongPress = true;
      }, LONG_PRESS_THRESHOLD);
    }

    // 鼠标移动事件处理器
    function handleMouseMove(e) {
      // 如果移动超过阈值，取消长按检测
      if (
        pressTimer !== null &&
        (Math.abs(e.clientX - startCoords.x) > MOVE_THRESHOLD || Math.abs(e.clientY - startCoords.y) > MOVE_THRESHOLD)
      ) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }
    }

    // 鼠标松开事件处理器
    function handleMouseUp() {
      // 清除长按计时器
      if (pressTimer !== null) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }
    }

    // 点击事件处理器
    function handleClick(e) {
      // 如果检测到长按，不触发烟花
      if (isLongPress) {
        return;
      }

      // 检查是否正在选择文本
      const selection = window.getSelection();
      if (selection && selection.toString().length > 0) {
        return;
      }

      // 更加健壮的交互元素检查
      try {
        if (
          !e.target ||
          ["BUTTON", "A", "INPUT", "TEXTAREA", "SELECT"].includes(e.target.tagName) ||
          e.target.closest("button, a, [role='button']") ||
          e.target.classList.contains("cursor-pointer") ||
          e.target.getAttribute("data-no-fireworks") === "true"
        ) {
          return;
        }
        createFirework(e.clientX, e.clientY);
      } catch (err) {
        // 错误静默处理
        console.error("Fireworks error:", err);
      }
    }

    // 处理窗口大小调整
    function handleResize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    // 添加事件监听器
    document.addEventListener("mousedown", handleMouseDown);
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
    document.addEventListener("click", handleClick);

    // 添加触摸事件支持
    const touchStartHandler = e => {
      if (e.touches.length > 0) {
        handleMouseDown({
          clientX: e.touches[0].clientX,
          clientY: e.touches[0].clientY,
        });
      }
    };

    const touchMoveHandler = e => {
      if (e.touches.length > 0) {
        handleMouseMove({
          clientX: e.touches[0].clientX,
          clientY: e.touches[0].clientY,
        });
      }
    };

    const touchEndHandler = e => {
      handleMouseUp();
      // Also trigger click for touch end
      if (!isLongPress && e.changedTouches.length > 0) {
        const touch = e.changedTouches[0];
        const clickEvent = {
          clientX: touch.clientX,
          clientY: touch.clientY,
          target: document.elementFromPoint(touch.clientX, touch.clientY),
        };
        handleClick(clickEvent);
      }
    };

    document.addEventListener("touchstart", touchStartHandler);
    document.addEventListener("touchmove", touchMoveHandler);
    document.addEventListener("touchend", touchEndHandler);

    window.addEventListener("resize", handleResize);

    // 无需立即启动动画 - 将在首次点击时启动
    // 动画现在仅在创建粒子时启动

    // 清理函数
    function cleanup() {
      document.removeEventListener("mousedown", handleMouseDown);
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
      document.removeEventListener("click", handleClick);

      // 移除触摸事件监听器
      document.removeEventListener("touchstart", touchStartHandler);
      document.removeEventListener("touchmove", touchMoveHandler);
      document.removeEventListener("touchend", touchEndHandler);

      window.removeEventListener("resize", handleResize);

      if (pressTimer !== null) {
        clearTimeout(pressTimer);
        pressTimer = null;
      }

      if (window.fireworksAnimationId) {
        cancelAnimationFrame(window.fireworksAnimationId);
        window.fireworksAnimationId = null;
      }
      canvas.remove();
    }

    // 在页面过渡时设置清理
    document.addEventListener("astro:before-swap", cleanup, { once: true });

    // 优化页面可见性变化
    document.addEventListener("visibilitychange", function () {
      if (document.hidden && window.fireworksAnimationId) {
        cancelAnimationFrame(window.fireworksAnimationId);
        window.fireworksAnimationId = null;
        animationActive = false;
      } else if (!document.hidden && particles.length > 0 && !animationActive) {
        startAnimation();
      }
    });

    return cleanup;
  }
</script>
